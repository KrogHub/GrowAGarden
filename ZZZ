local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TweenService = game:GetService("TweenService")

-- Create GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "KrogHub"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

-- Toggle Button (Larger size to fit "KrogHub", dark red border)
local ToggleButton = Instance.new("Frame")
ToggleButton.Size = UDim2.new(0, 60, 0, 60) -- Increased to fit "KrogHub"
ToggleButton.Position = UDim2.new(0.05, 0, 0.05, 0)
ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black background
ToggleButton.BorderSizePixel = 2 -- Dark red border
ToggleButton.BorderColor3 = Color3.fromRGB(139, 0, 0) -- Dark red
ToggleButton.Active = true
ToggleButton.Draggable = true
ToggleButton.Parent = ScreenGui
ToggleButton.ClipsDescendants = true

local UICornerToggle = Instance.new("UICorner")
UICornerToggle.CornerRadius = UDim.new(0.5, 0)
UICornerToggle.Parent = ToggleButton

local ToggleLabel = Instance.new("TextLabel")
ToggleLabel.Size = UDim2.new(1, 0, 1, 0)
ToggleLabel.BackgroundTransparency = 1
ToggleLabel.Text = "KrogHub"
ToggleLabel.TextColor3 = Color3.fromRGB(255, 50, 50) -- Red text
ToggleLabel.TextSize = 14
ToggleLabel.Font = Enum.Font.GothamBlack -- Bold font
ToggleLabel.TextScaled = false
ToggleLabel.Parent = ToggleButton

-- Main Frame
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 450, 0, 350)
MainFrame.Position = UDim2.new(0.5, -225, 0.5, -175)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Visible = false
MainFrame.Parent = ScreenGui

local UICornerMain = Instance.new("UICorner")
UICornerMain.CornerRadius = UDim.new(0, 10)
UICornerMain.Parent = MainFrame

-- Title Bar
local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 40)
TitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainFrame

local UICornerTitle = Instance.new("UICorner")
UICornerTitle.CornerRadius = UDim.new(0, 10)
UICornerTitle.Parent = TitleBar

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Size = UDim2.new(1, -60, 1, 0)
TitleLabel.Position = UDim2.new(0, 15, 0, 0)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Text = "KrogHub"
TitleLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
TitleLabel.TextSize = 20
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.Parent = TitleBar

-- Close Button
local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -40, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.SourceSansBold
CloseButton.Parent = TitleBar

local UICornerClose = Instance.new("UICorner")
UICornerClose.CornerRadius = UDim.new(0, 5)
UICornerClose.Parent = CloseButton

-- Minimize/Open Button
local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -75, 0, 5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
MinimizeButton.Text = "-"
MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MinimizeButton.TextSize = 16
MinimizeButton.Font = Enum.Font.SourceSansBold
MinimizeButton.Parent = TitleBar

local UICornerMinimize = Instance.new("UICorner")
UICornerMinimize.CornerRadius = UDim.new(0, 5)
UICornerMinimize.Parent = MinimizeButton

-- Player List Frame
local PlayerListFrame = Instance.new("Frame")
PlayerListFrame.Size = UDim2.new(0, 150, 1, -70)
PlayerListFrame.Position = UDim2.new(0, 10, 0, 70)
PlayerListFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
PlayerListFrame.BorderSizePixel = 0
PlayerListFrame.Parent = MainFrame

local UICornerPlayerList = Instance.new("UICorner")
UICornerPlayerList.CornerRadius = UDim.new(0, 8)
UICornerPlayerList.Parent = PlayerListFrame

-- Refresh Button
local RefreshButton = Instance.new("TextButton")
RefreshButton.Size = UDim2.new(1, -20, 0, 30)
RefreshButton.Position = UDim2.new(0, 10, 0, 30)
RefreshButton.BackgroundColor3 = Color3.fromRGB(50, 100, 150)
RefreshButton.Text = "Refresh Players"
RefreshButton.TextColor3 = Color3.fromRGB(255, 255, 255)
RefreshButton.TextSize = 14
RefreshButton.Font = Enum.Font.SourceSans
RefreshButton.Parent = MainFrame

local UICornerRefresh = Instance.new("UICorner")
UICornerRefresh.CornerRadius = UDim.new(0, 5)
UICornerRefresh.Parent = RefreshButton

-- Player Scroll
local PlayerScroll = Instance.new("ScrollingFrame")
PlayerScroll.Size = UDim2.new(1, -10, 1, -10)
PlayerScroll.Position = UDim2.new(0, 5, 0, 5)
PlayerScroll.BackgroundTransparency = 1
PlayerScroll.ScrollBarThickness = 4
PlayerScroll.ScrollBarImageColor3 = Color3.fromRGB(150, 150, 150)
PlayerScroll.Parent = PlayerListFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 5)
UIListLayout.Parent = PlayerScroll

-- Item Viewer Frame
local ItemFrame = Instance.new("Frame")
ItemFrame.Size = UDim2.new(0, 280, 1, -70)
ItemFrame.Position = UDim2.new(0, 160, 0, 70)
ItemFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
ItemFrame.BorderSizePixel = 0
ItemFrame.Visible = false
ItemFrame.Parent = MainFrame

local UICornerItem = Instance.new("UICorner")
UICornerItem.CornerRadius = UDim.new(0, 8)
UICornerItem.Parent = ItemFrame

-- Item Title (Moved above CategoryFrame)
local ItemTitle = Instance.new("TextLabel")
ItemTitle.Size = UDim2.new(1, 0, 0, 20)
ItemTitle.Position = UDim2.new(0, 0, 0, 0)
ItemTitle.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ItemTitle.Text = "Items"
ItemTitle.TextColor3 = Color3.fromRGB(200, 200, 200)
ItemTitle.TextSize = 16
ItemTitle.Font = Enum.Font.SourceSansBold
ItemTitle.Parent = ItemFrame

local UICornerItemTitle = Instance.new("UICorner")
UICornerItemTitle.CornerRadius = UDim.new(0, 8)
UICornerItemTitle.Parent = ItemTitle

-- Category Tabs (Moved below ItemTitle)
local CategoryFrame = Instance.new("Frame")
CategoryFrame.Size = UDim2.new(1, 0, 0, 30)
CategoryFrame.Position = UDim2.new(0, 0, 0, 20)
CategoryFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
CategoryFrame.BorderSizePixel = 0
CategoryFrame.Parent = ItemFrame

local UICornerCategory = Instance.new("UICorner")
UICornerCategory.CornerRadius = UDim.new(0, 8)
UICornerCategory.Parent = CategoryFrame

local CategoryLayout = Instance.new("UIListLayout")
CategoryLayout.FillDirection = Enum.FillDirection.Horizontal
CategoryLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
CategoryLayout.Padding = UDim.new(0, 5)
CategoryLayout.Parent = CategoryFrame

local categories = {"Pets", "Fruits", "Seeds", "Tools"}
local categoryButtons = {}
local selectedCategory = "Pets"
local clonedItems = {}

-- Initialize clonedItems for each player
for _, player in pairs(Players:GetPlayers()) do
    clonedItems[player.Name] = {}
end

for i, category in ipairs(categories) do
    local CategoryButton = Instance.new("TextButton")
    CategoryButton.Size = UDim2.new(0, 65, 0, 25)
    CategoryButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    CategoryButton.Text = category
    CategoryButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CategoryButton.TextSize = 14
    CategoryButton.Font = Enum.Font.SourceSans
    CategoryButton.Parent = CategoryFrame
    local UICornerCatBtn = Instance.new("UICorner")
    UICornerCatBtn.CornerRadius = UDim.new(0, 5)
    UICornerCatBtn.Parent = CategoryButton
    categoryButtons[category] = CategoryButton
end

local ItemScroll = Instance.new("ScrollingFrame")
ItemScroll.Size = UDim2.new(1, -10, 1, -60)
ItemScroll.Position = UDim2.new(0, 5, 0, 50)
ItemScroll.BackgroundTransparency = 1
ItemScroll.ScrollBarThickness = 4
ItemScroll.ScrollBarImageColor3 = Color3.fromRGB(150, 150, 150)
ItemScroll.Parent = ItemFrame

local ItemListLayout = Instance.new("UIListLayout")
ItemListLayout.SortOrder = Enum.SortOrder.LayoutOrder
ItemListLayout.Padding = UDim.new(0, 5)
ItemListLayout.Parent = ItemScroll

-- Variables
local isMinimized = false
local selectedPlayer = nil

-- Function to log detailed tool information
local function logToolDetails(tool, context)
    print("=== Debugging Tool: " .. tool.Name .. " (" .. context .. ") ===")
    
    local ageAttribute = tool:GetAttribute("Age")
    print("Age Attribute: " .. (ageAttribute and tostring(ageAttribute) or "Not found"))
    if tool:FindFirstChild("Age") then
        print("Age Property: " .. tostring(tool.Age))
    else
        print("Age Property: Not found")
    end

    print("Tool Hierarchy:")
    local function inspectObject(obj, indent)
        indent = indent or 0
        local indentStr = string.rep("  ", indent)
        print(indentStr .. obj.ClassName .. ": " .. obj.Name)
        if obj:IsA("BasePart") then
            print(indentStr .. "  Transparency: " .. obj.Transparency)
            print(indentStr .. "  CanCollide: " .. tostring(obj.CanCollide))
            print(indentStr .. "  Anchored: " .. tostring(obj.Anchored))
            print(indentStr .. "  Position: " .. tostring(obj.Position))
            print(indentStr .. "  CFrame: " .. tostring(obj.CFrame))
        end
        for _, child in pairs(obj:GetChildren()) do
            inspectObject(child, indent + 1)
        end
    end
    inspectObject(tool)

    local scripts = {}
    for _, obj in pairs(tool:GetDescendants()) do
        if obj:IsA("BaseScript") then
            table.insert(scripts, obj)
        end
    end
    print("Scripts Found: " .. #scripts)
    for i, script in ipairs(scripts) do
        print("  Script " .. i .. ": " .. script.Name .. " (" .. script.ClassName .. ")")
        if script:IsA("LocalScript") then
            script.Disabled = true
            print("  Disabled LocalScript: " .. script.Name)
        end
    end

    for _, obj in pairs(tool:GetDescendants()) do
        if obj:IsA("Model") then
            print("Model: " .. obj.Name .. " PrimaryPart: " .. (obj.PrimaryPart and obj.PrimaryPart.Name or "None"))
        end
    end
end

-- Function to make pet models visible and non-collidable
local function makePetVisible(tool)
    if tool:IsA("Tool") then
        logToolDetails(tool, "Cloned")
        for _, part in pairs(tool:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Transparency = 0
                part.CanCollide = false -- Ensure no collisions
                part.Anchored = false
            elseif part:IsA("Model") and part.PrimaryPart then
                part:SetPrimaryPartCFrame(LocalPlayer.Character and LocalPlayer.Character.HumanoidRootPart and 
                    LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -3) or CFrame.new(0, 0, 0))
            end
        end
        tool.Equipped:Connect(function()
            print("Tool Equipped: " .. tool.Name)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = LocalPlayer.Character.HumanoidRootPart
                for _, part in pairs(tool:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Transparency = 0
                        part.CanCollide = false -- Ensure no collisions when equipped
                        part.CFrame = rootPart.CFrame * CFrame.new(0, 0, -3)
                    elseif part:IsA("Model") and part.PrimaryPart then
                        part:SetPrimaryPartCFrame(rootPart.CFrame * CFrame.new(0, 0, -3))
                    end
                end
            end
            logToolDetails(tool, "Equipped")
        end)
        tool.Unequipped:Connect(function()
            print("Tool Unequipped: " .. tool.Name)
            for _, part in pairs(tool:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = 0
                    part.CanCollide = false -- Ensure no collisions when unequipped
                end
            end
            logToolDetails(tool, "Unequipped")
        end)
    end
end

-- Function to categorize items
local function categorizeItem(item)
    local name = string.lower(item.Name)
    if string.find(name, "age") and string.find(name, "kg") then
        return "Pets"
    elseif string.find(name, "kg") then
        return "Fruits"
    elseif string.find(name, "seed") then
        return "Seeds"
    else
        return "Tools"
    end
end

-- Function to update item list based on category
local function updateItemList(player, category)
    for _, v in pairs(ItemScroll:GetChildren()) do
        if v:IsA("TextButton") then
            v:Destroy()
        end
    end
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") and categorizeItem(item) == category then
                if not clonedItems[player.Name][item.Name] then
                    local ItemButton = Instance.new("TextButton")
                    ItemButton.Size = UDim2.new(1, -10, 0, 30)
                    ItemButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                    ItemButton.Text = item.Name
                    ItemButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                    ItemButton.TextSize = 14
                    ItemButton.Font = Enum.Font.SourceSans
                    ItemButton.Parent = ItemScroll
                    local UICornerItemBtn = Instance.new("UICorner")
                    UICornerItemBtn.CornerRadius = UDim.new(0, 5)
                    UICornerItemBtn.Parent = ItemButton
                    ItemButton.MouseButton1Click:Connect(function()
                        local clonedItem = item:Clone()
                        makePetVisible(clonedItem)
                        clonedItem.Parent = LocalPlayer.Backpack
                        clonedItems[player.Name][item.Name] = true
                        ItemButton:Destroy()
                        updateItemList(player, category)
                    end)
                end
            end
        end
    end
    ItemScroll.CanvasSize = UDim2.new(0, 0, 0, ItemListLayout.AbsoluteContentSize.Y)
end

-- Function to update player list
local function updatePlayerList()
    for _, v in pairs(PlayerScroll:GetChildren()) do
        if v:IsA("TextButton") then
            v:Destroy()
        end
    end
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local PlayerButton = Instance.new("TextButton")
            PlayerButton.Size = UDim2.new(1, -10, 0, 30)
            PlayerButton.BackgroundColor3 = Color3.fromRGB(60, 80, 100)
            PlayerButton.Text = player.Name
            PlayerButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            PlayerButton.TextSize = 14
            PlayerButton.Font = Enum.Font.SourceSans
            PlayerButton.Parent = PlayerScroll
            local UICornerPlayerBtn = Instance.new("UICorner")
            UICornerPlayerBtn.CornerRadius = UDim.new(0, 5)
            UICornerPlayerBtn.Parent = PlayerButton
            PlayerButton.MouseButton1Click:Connect(function()
                selectedPlayer = player
                ItemTitle.Text = player.Name .. "'s " .. selectedCategory
                ItemFrame.Visible = true
                updateItemList(player, selectedCategory)
            end)
        end
    end
    PlayerScroll.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
end

-- Event Handlers
ToggleButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        MainFrame.Visible = not MainFrame.Visible
        if MainFrame.Visible then
            local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {BackgroundTransparency = 0})
            tween:Play()
        end
    end
end)

CloseButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {BackgroundTransparency = 1})
    tween:Play()
    tween.Completed:Connect(function()
        MainFrame.Visible = false
    end)
end)

MinimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    local targetSize = isMinimized and UDim2.new(0, 450, 0, 40) or UDim2.new(0, 450, 0, 350)
    MinimizeButton.Text = isMinimized and "+" or "-"
    local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize})
    tween:Play()
    PlayerListFrame.Visible = not isMinimized
    RefreshButton.Visible = not isMinimized
    ItemFrame.Visible = isMinimized and false or ItemFrame.Visible
end)

RefreshButton.MouseButton1Click:Connect(function()
    updatePlayerList()
    local tween = TweenService:Create(RefreshButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(70, 120, 170)})
    tween:Play()
    tween.Completed:Connect(function()
        local tweenBack = TweenService:Create(RefreshButton, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(50, 100, 150)})
        tweenBack:Play()
    end)
end)

for category, button in pairs(categoryButtons) do
    button.MouseButton1Click:Connect(function()
        selectedCategory = category
        for _, btn in pairs(categoryButtons) do
            btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        end
        button.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        if selectedPlayer then
            ItemTitle.Text = selectedPlayer.Name .. "'s " .. category
            updateItemList(selectedPlayer, category)
        end
    end)
end

-- Initial Setup
categoryButtons["Pets"].BackgroundColor3 = Color3.fromRGB(80, 80, 80)
updatePlayerList()

-- Update on player added/removed
Players.PlayerAdded:Connect(function(player)
    clonedItems[player.Name] = {}
    updatePlayerList()
end)
Players.PlayerRemoving:Connect(function(player)
    clonedItems[player.Name] = nil
    updatePlayerList()
end)

-- Monitor Backpack for debugging
LocalPlayer.Backpack.ChildAdded:Connect(function(child)
    if child:IsA("Tool") then
        print("New tool added to local Backpack: " .. child.Name)
        logToolDetails(child, "New Tool")
    end
end)
